package test;

public class ii {
	public static void main(String[] args) {
		///////////////////////////////////////
		// #1. 연산후 대입, 당연히 사칙연산의 순서
		// int형 변수 선언
		int k07_ii;
		// int형 변수 k07_ii 에 연산을 수행 후 결과값 저장
		k07_ii = 1+2;
		// k07_ii 값 출력
		System.out.printf("#1-1 : %d\n", k07_ii);
		// int형 변수 k07_ii 에 연산을 수행 후 결과값 저장
		k07_ii = 1+2*3;
		// k07_ii 값 출력
		System.out.printf("#1-2 : %d\n", k07_ii);
		
		///////////////////////////////////////
		//#2. 누적하기, 합구하기
		
		// 누적값을 저장할 int형 변수 k07_sum 선언
		int k07_sum;	// c는 맨 앞에서만 선언해야 하지만, c++, java는 필요할 때 선언해도 됨, 하지만 지저분
		// 누적값 저장할 변수 0으로 초기화
		k07_sum = 0; // 누적, 루프는 꼭 초기화
		
		//1부터 100까지 더해보자. 아직 안 배운 for문이 나오지만 c에서 했지?
		// 1-100까지 loop 연산 수행
		for(int i=1; i<101; i++){
			// 누적값 변수 k07_sum 에 1 + 100까지  순차적으로 증가시켜서 대입한다
			k07_sum = k07_sum+i;
		}
		// 누적값 변수 출력
		System.out.printf("#2 : %d\n", k07_sum);
		// 평균을 처리한다면 여기서 다더한다음 해야지
		// 누적값 변수의 평균을 구한다. (100번 실행했으니 100을 나눠준다)
		System.out.printf("#2-2 : %d\n", k07_sum/100);
		
		// c에서 배열을 배웠으니 응용해보자
		// int 형 변수  v에 index 0 - 4까지 순차적으로 1,2,3,4,5 값을 넣어준다
		int [] v={1,2,3,4,5};
		// 배열의 값을 누적시켜줄 변수 k07_vSum 선언
		int k07_vSum;
		// 배열 누적값 변수 초기화
		k07_vSum=0;
		
		// 배열의 크기가 0-4까지 총 5개 이므로 5번 반복시켜준다
		for(int i=0; i<5; i++){
			// 배열누적값 변수에 배열의 값을 순차적으로 누적시켜서 대입한다
			k07_vSum = k07_vSum+v[i];
		}
		// 배열의 값들이 누적된 누적값 변수를 출력해준다
		System.out.printf("#2-3 : %d\n", k07_vSum);
		
		////////////////////////////////////////////////
		// #3 정수형 변수의 나눗셈은 정수범위에서 버림처리, 올림버림이 뭔지 모르면 집에 가든지
		// int형 변수에는 실수형 값이 들어가지 않으므로 버림처리가 된다
		k07_ii = 1000/3; // 333.333333.. 이 나오지 않는다
		// 값이 어떻게 나오는지 확인
		System.out.printf("#3-1 : %d\n", k07_ii);
		
		// 나머지 연산을 해서 나머지 값을 변수에 대입
		k07_ii = 1000%3; // 나머지를 계산할땐 %
		// 나머지 값이 어떻게 나오는지 출력해서 확인
		System.out.printf("#3-2 : %d\n", k07_ii);
		
		// 나머지 연산자의 응용
		// 0부터 19까지 20번 반복해주는 for문 
		for(int i=0; i<20; i++){
			// 반복되는 변수 i 값을 출력해준다
			System.out.printf("#3-3 : %d  ", i);
			
			// 0부터 19까지 순차적으로 증가되는 변수 i를 5로 나눴을 때 0인지 확인한다
			if(((i+1)%5)==0){ // 나머지가 0인것은 5번마다 있다. 왜 1을 더했는지 생각해볼것
				// 5로 나눈 나머지가 0일때마다 엔터처리
				System.out.printf("\n");
			}
		}
		
		///////////////////////////////////////////////////////////////
		// #4 원하는 자릿수 반올림, 버림처리
		
		// int형 변수 k07_ii에 12345 로 값 대입
		k07_ii = 12345;		// 12345원은 10원이하 버려서 처리하기.
		// int형 변수 j에 12345를 10으로 나눴다가 곱해주면 1의 자리가 실수로 바뀌었다가 정수형으로 바뀌므로 버림처리가 된다
		int j = (k07_ii/10) * 10;	// 정수형 연산의 특징을 잘 이해해야 한다.
		// 변수 j의 값 출력해서 확인
		System.out.printf("#4-1 : %d\n", j);
		
		// int형 변수 k07_ii에 12345 로 값 대입
		k07_ii = 12345;	// 12345원은 10원이하 반올림 처리하기.
		// 변수 j에 5를 더하고 10으로 나누고 다시 10으로 곱하면 1의 단위 값이 5보다 컸을때 10의 단위가 1 증가하므로 반올림 처리가 된다.
		j = ((k07_ii+5)/10)*10;		// 정수형 연산의 특징을 잘 이해해야 한다.
		
		// 변수 j의 값 확인
		System.out.printf("#4-2 : %d\n", j);

		// int형 변수 k07_ii에 12344 로 값 대입
		k07_ii = 12344;	// 12344원은 10원이하 반올림 처리하기.
		// 변수 j에 5를 더하고 10으로 나누고 다시 10으로 곱하면 1의 단위 값이 5보다 컸을때 10의 단위가 1 증가하므로 반올림 처리가 된다.
		// 지금은 4가 반올림 조건을 충족하지 못하므로 10의 단위가 증가하지 않는다
		j = ((k07_ii+5)/10)*10;	// 이 식이 맞는지 검증해 보자
		
		// 변수 j의 값 확인
		System.out.printf("#4-2 : %d\n", j);
		
		///////////////////////////////////////////
		// #4-x. 100원이하 버림올림, 1000원이하 버림 반올림을 구현하라
		// 변수 j에 10의 단위까지 버림 처리
		j = (k07_ii/100) * 100;
		// 변수 j값 확인
		System.out.printf("#4-3 : %d\n", j);

		// if 조건문을 이용하여 100의 단위가 500 이하인지 비교한다
		if(k07_ii%1000 < 500)
			// 100의 단위 절삭
			j = (k07_ii/1000) * 1000;
		else 
			// 1000의 단위 1 증가
			j = ((k07_ii/1000)+1) * 1000;
		// j 값 출력해서 확인
		System.out.printf("#4-4 : %d\n", j);
		
		////////////////////////////////////////////////
		// #5. 소수점 이하에서는 어떻게 할까?
		
		// int 형 변수에 k07_MyVal int 형 연산을 하게 되면 소수점 이하가 버려진다
		int k07_MyVal = 14/5;	// 이 값은 2.8이다. 소수점 이하 버리면 2, 반올림하면 3이다.
		//  k07_MyVal 변수를 출력해서 확인해보자 (소수점 이하 버려짐) 
		System.out.printf("#5-1 : %d\n", k07_MyVal); // 그냥 연산하고 넣으면 버려진다.
		
		// 머리를 쓰면 저놈을 실수형 (float, double 형태로 형변환) 계산을 한 후 0.5를 더한다음
		// 정수형 형변환을 하면 반올림 처리가 된다.
		// 실수(Real number) 가 뭔지 모르면 집에 가든지
		
		// 실수형(double) 변수 k07_MyValF 선언
		double k07_MyValF;
		
		// 실수형 변수에 int형 변수 연산을 대입하면 소수이하 값은 버려진다
		k07_MyValF=14/5;
		// 출력해서 값 확인
		System.out.printf("#5-2 : %f\n", k07_MyValF); 	// 소수형 연산이 되었을 줄 알았지?
		
		// 실수형 변수에 대입할때 2항 연산자의 한 개라도 실수형태가 있어야 제대로 된 실수값이 저장된다 
		k07_MyValF=14.0/5;	//한 개라도 실수 형태의 표시를 해야 결과가 실수가 나온다.
		// 실수형으로 잘 나오는지  출력해서 확인
		System.out.printf("#5-3 : %f\n", k07_MyValF);
		
		// double형 변수 k07_MyValF에  실수형 숫자 0.5를 더해도 제대로 나오는지 확인해보자
		k07_MyValF=(14.0)/5 +0.5;	// 실수형 계산에서 0.5를 더해보자.
		// 값을 출력해서 확인
		System.out.printf("#5-4 : %f\n", k07_MyValF);
		
		// 실수형 계산을 다 한 뒤에 정수형 형변환을 해서 확인해보자
		k07_MyVal=(int)((14.0)/5+0.5);	//실수형 계산을 하고 정수형 형변환을 하자.
		// 소수점 자리만 절삭된 것 확인
		System.out.printf("#5-5 : %d\n", k07_MyVal);
		
	}
}
